#
# Configuration file for the Bethe-Bloch parameterisation
#

species: ["El", "Pi", "Ka", "Pr", "De", "He"]

p:
  plot: { 
          name: "clSizeCosL_vs_p",
          title: "#LT Cluster size #GT #times #LT cos #lambda #GT vs #it{p}; #it{p} (GeV/#it{c}); #LT Cluster size #GT #times #LT cos #lambda #GT; Counts",
          xVariable: "fPAbs",
          nXBins: 47,
          xMin: 0.3,
          xMax: 5,
          xLabel: "#it{p} (GeV/#it{c})",
          yVariable: "fClSizeCosL",
          nYBins: 45,
          yMin: 0,
          yMax: 15,
          yLabel: "#LT Cluster size #GT #times #LT cos #lambda #GT",
          type: "TH2F",
          particle: ["all", "El", "Pi", "Ka", "Pr", "De", "He"],
        }
  xMinFit: 0.3
  xMaxFit: 2
  yMinFit: 0
  yMaxFit: 12
  xMinDoubleFit: 0.
  xMaxDoubleFit: -1.

  signalFit:
    #function: '[0] * [2] * exp( - 0.5 * ( (x - [1]) / [2] )^2 ) * ( 1 + TMath::Erf( [3] * (x - [1]) / [2] ) )' # Crystal Ball
    expr: 'x < ([1] + [3]*[2]) ? [0] * exp( - ( (x - [1]) / (std::sqrt(2) * [2]) )^2 ) : [0] * exp( - (x - [1] - 0.5*[2]*[3]) * [3]/[2])' # Exponentialy Modified Gaussian
    #expr: '[0] / (sqrt(2) * [2]) * exp(-0.5 * ((x-[1])/[2])^2)'
    norm_idx: 0
    mean_idx: 1
    sigma_idx: 2
    params: 
      {
        0: {
          init: 1,
          opt: 'set',
          limits: [0, 0]
        },
        1: {
          init: 1,
          opt: 'set',
          limits: [0, 0]
        },
        2: {
          init: 1,
          opt: 'set',
          limits: [0, 0]
        },
        3: {
          init: 1,
          opt: 'limit',
          limits: [0.7, 2.]
        },
      }
    nParams: 4
    meanParLims: [4., 10.]
  fmFit:
    function: 'gaus'
    nParams: 3

  # Fit from the right side (pre-fit)
  prefit: True
  yMinPreFit: [6.2, 5.5, 4.6, 4.2, 3.7, 3.6, 3.2, 3.2, 2.7, 2.6]
  yMaxPreFit: [12, 12, 12, 12, 12, 10, 10, 10, 10, 10]

  BBparams: {
              'kp1': -84.3,
              'kp2': -1.52,
              'kp3': 0.22,
              'kp4': 1.37,
              'kp5': 1.57,
            }   

  sigma_params: {
                  'kp0': 0.1988, #-0.181312,
                  'kp1': -0.1204, #0.956085,
                  'kp2': -0.04313, #-0.485012,
                  'xVar': 'fPAbs',
                }

  plot_nsigma: {
                name: "nsigma_vs_p",
                title: "n #sigma vs #it{p}; #it{p} (GeV/#it{c}); n #sigma; Counts",
                xVariable: "fPAbs",
                nXBins: 70,
                xMin: 0.35,
                xMax: 1.05,
                xLabel: "#it{p} (GeV/#it{c})",
                yVariable: "fNSigmaKa",
                nYBins: 50,
                yMin: -10,
                yMax: 10,
                yLabel: "n #sigma_{ITS}",
                type: "TH2F",
                particle: ["all", "El", "Pi", "Ka", "Pr", "De", "He"],
               }

  plot_sigma: {
                name: "sigma_vs_p",
                title: "#sigma vs #it{p}; #it{p} (GeV/#it{c}); n #sigma; Counts",
                xVariable: "fPAbs",
                nXBins: 70,
                xMin: 0.35,
                xMax: 1.05,
                xLabel: "#it{p} (GeV/#it{c})",
                yVariable: "fSigmaClSizeCosL",
                nYBins: 50,
                yMin: -1,
                yMax: 1,
                yLabel: "#sigma_{ITS}",
                type: "TH2F",
                particle: ["all", "El", "Pi", "Ka", "Pr", "De", "He"],
               }

  plot_expected: {
                name: "expected_clsize_vs_p",
                title: "Expected #LT Cluster size #GT #times #LT cos #lambda #GT vs #it{p}; #it{p} (GeV/#it{c}); Expected #LT Cluster size #GT #times #LT cos #lambda #GT ; Counts",
                xVariable: "fP",
                nXBins: 100,
                xMin: -5,
                xMax: 5,
                xLabel: "#it{p} (GeV/#it{c})",
                yVariable: "fExpClSizeCosL",
                nYBins: 45,
                yMin: 0,
                yMax: 15,
                yLabel: "Expected #LT Cluster size #GT #times #LT cos #lambda #GT",
                type: "TH2F",
                particle: ["Pr"],
               }

  plot_mismatch_corr: {
                        name: "mismatch_corr",
                        title: "mismatch correlation; #it{p}_{TPC} - #it{p} (GeV/#it{c}); n #sigma; Counts",
                        xVariable: "fPMismatch",
                        nXBins: 20,
                        xMin: -0.5,
                        xMax: 0.5,
                        xLabel: "#it{p} (GeV/#it{c})",
                        yVariable: "fNSigmaPr",
                        nYBins: 100,
                        yMin: -25,
                        yMax: 25,
                        yLabel: "n #sigma_{ITS}",
                        type: "TH2F",
                        particle: ["Pr"],
                      }

beta:
  plot: { 
          name: "clSizeCosL_vs_beta",
          title: "#LT Cluster size #GT #times #LT cos #lambda #GT vs #it{beta}; #beta; #LT Cluster size #GT #times #LT cos #lambda #GT; Counts",
          xVariable: "fBetaAbs",
          nXBins: 25,
          xMin: 0,
          xMax: 1,
          xLabel: "#beta",
          yVariable: "fClSizeCosL",
          nYBins: 90,
          yMin: 0,
          yMax: 15,
          yLabel: "#LT Cluster size #GT #times #LT cos #lambda #GT",
          type: "TH2F",
          particle: ["all", "El", "Pi", "Ka", "Pr", "De", "He"],
        }
  xMinFit: 0.3
  xMaxFit: 1
  yMinFit: 0
  yMaxFit: 12
  xMinDoubleFit: 0.
  xMaxDoubleFit: -1.

  signalFit:
    #function: '(x < [1] + [3]) ? [0] / (sqrt(2) * [2]) * exp(-0.5 * ((x-[1])/[2])^2) : [0] / (sqrt(2) * [2]) * exp(-0.5 * ((x-[1])/[2])^2) * exp( - [3] * (x - [1] - [3]) / ([2] * [2]) )'
    #function: '[0] * TMath::Landau(x, [1], [2])'
    #function: '[0] * exp( - ( std::abs(x - [1]) / (std::sqrt(2) *[2]) )^[4] ) * ( 1 + std::erf( [3] * (x - [1]) / (std::sqrt(2) * [2]) ) )' # Crystal Ball
    #function: '[0] * [3]/2 * exp( [3]/2 * (2*[1] + [3]*[2]^2 - 2*x) ) * TMath::Erfc( ([1] + [3]*[2]^2 - x) / (sqrt(2)*[2]) )' # Exponentialy Modified Gaussian
    function: '[0] / (sqrt(2) * [2]) * exp(-0.5 * ((x-[1])/[2])^2)'
    nParams: 3
    meanParLims: [4., 10.]
  fmFit:
    #function: '[3] / (sqrt(2) * [5]) * exp(-0.5 * ((x-[4])/[5])^2)'
    function: '[4] / (sqrt(2) * [6]) * exp(-0.5 * ((x-[5])/[6])^2)'
    nParams: 3

  # Fit from the right side (pre-fit)
  prefit: False
  yMinPreFit: [4.7, 4.4, 4.4, 4.5, 4.3, 4.1, 4.1, 4.1, 4, 3.8, 3.8, 3.7, 3.7, 3.5, 3.3, 3.3, 3.3, 3.3, 2.8, 2.8] 
  yMaxPreFit: [12, 12, 12, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]

  BBparams: {
              'kp1': -14.5,
              'kp2': -8.64,
              'kp3': 0.04,
              'kp4': 1.58,
              'kp5': 0.83,
            }
  
  plot_nsigma: {
                name: "nsigma_vs_beta",
                title: "n #sigma vs #beta; #beta; n #sigma; Counts",
                xVariable: "fBeta",
                nXBins: 100,
                xMin: -1,
                xMax: 1,
                xLabel: "#beta",
                yVariable: "fNSigmaPr",
                nYBins: 100,
                yMin: -5,
                yMax: 5,
                yLabel: "n #sigma_{ITS, #beta}",
                type: "TH2F",
                particle: ["all", "El", "Pi", "Ka", "Pr", "De", "He"],
               }

betagamma:
  plot: { 
          name: "clSizeCosL_vs_beta",
          title: "#LT Cluster size #GT #times #LT cos #lambda #GT vs #it{beta}; #beta #gamma; #LT Cluster size #GT #times #LT cos #lambda #GT; Counts",
          xVariable: "fBetaGamma",
          nXBins: 50,
          xMin: 0,
          xMax: 5,
          xLabel: "#beta",
          yVariable: "fClSizeCosL",
          nYBins: 45,
          yMin: 0,
          yMax: 15,
          yLabel: "#LT Cluster size #GT #times #LT cos #lambda #GT",
          type: "TH2F",
          particle: ["all", "El", "Pi", "Ka", "Pr", "De", "He"],
        }
  xMinFit: 0.48
  xMaxFit: 5
  yMinFit: 0
  yMaxFit: 12
  xMinDoubleFit: 0.48
  xMaxDoubleFit: -1

  signalFit:
    #function: '[0] * [2] * exp( - 0.5 * ( (x - [1]) / [2] )^2 ) * ( 1 + TMath::Erf( [3] * (x - [1]) / [2] ) )' # Crystal Ball
    expr: 'x < ([1] + [3]*[2]) ? [0] * exp( - ( (x - [1]) / (std::sqrt(2) * [2]) )^2 ) : [0] * exp( - (x - [1] - 0.5*[2]*[3]) * [3]/[2])' # Exponentialy Modified Gaussian
    #expr: '[0] / (sqrt(2) * [2]) * exp(-0.5 * ((x-[1])/[2])^2)'
    norm_idx: 0
    mean_idx: 1
    sigma_idx: 2
    params: 
      {
        0: {
          init: 1,
          opt: 'set',
          limits: [0, 0]
        },
        1: {
          init: 1,
          opt: 'set',
          limits: [0, 0]
        },
        2: {
          init: 1,
          opt: 'set',
          limits: [0, 0]
        },
        3: {
          init: 1,
          opt: 'limit',
          limits: [0.7, 2.]
        },
      }
    nParams: 4
    meanParLims: [4., 10.]
  fmFit:
    function: '[3] * exp(-0.5 * ((x-[4])/[5])^2)'
    #function: '[4] * exp(-0.5 * ((x-[5])/[6])^2)'
    nParams: 3

  # Fit from the right side (pre-fit)
  prefit: False
  yMinPreFit: [4.7, 4.4, 4.4, 4.5, 4.3, 4.1, 4.1, 4.1, 4, 3.8, 3.8, 3.7, 3.7, 3.5, 3.3, 3.3, 3.3, 3.3, 2.8, 2.8] 
  yMaxPreFit: [12, 12, 12, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]

  BBparams: {
              'kp1': -14.5,
              'kp2': -8.64,
              'kp3': 0.04,
              'kp4': 1.58,
              'kp5': 0.83,
            }
  
  plot_nsigma: {
                name: "nsigma_vs_beta",
                title: "n #sigma vs #beta; #beta; n #sigma; Counts",
                xVariable: "fBeta",
                nXBins: 100,
                xMin: -1,
                xMax: 1,
                xLabel: "#beta",
                yVariable: "fNSigmaPr",
                nYBins: 100,
                yMin: -5,
                yMax: 5,
                yLabel: "n #sigma_{ITS, #beta}",
                type: "TH2F",
                particle: ["all", "El", "Pi", "Ka", "Pr", "De", "He"],
               }